[
{
	"uri": "//localhost:1313/",
	"title": "Introduction of this Workshop",
	"tags": [],
	"description": "",
	"content": "Building a Web Application using AWS Amplify Overview In this workshop, you will learn to create a simple full-stack web application using AWS Amplify. Throughout this workshop, you will build and host a React application on AWS, use Amplify to add authentication, data, and a serverless function to capture the signed-up user\u0026rsquo;s email and save it in the database. Then, you will implement a frontend for your app that integrates with your cloud resources.\nArchitect Schema The following diagram provides a visual representation of the services used in this simple lab and how they are connected. This application uses AWS Amplify, GraphQL API, AWS Lambda, and Amazon DynamoDB.\nAs you go through the workshop, you will learn about the services in detail and find resources that will help you get up to speed with them.\nWhat you will accomplish Host: Build and deploy a React application on the AWS global content delivery network (CDN).\nAuthenticate: Add authentication to your app to enable sign-in and sign-out functionality.\nDatabase: Integrate a real-time API, database, and a serverless function.\nFunction: Implement a lambda function that is triggered when a user signs up to the App.\nRequired An AWS account: with administrator permission\nNodejs and npm: Installed on your computer\nGit \u0026amp; GitHub account: Foundational knowledge of Visual Studio Code: Installed on your computer\nIf you have a FreeTier Account, that\u0026rsquo;s so great\nAccounts created within the past 24 hours might not yet have access to the services required for this lab\nMain content Introduction Create \u0026amp; Deploy a Web Application with ReactJS Build Serverless function with AWS Lamda Create Data Table with DynamoDB Link Serverless function to Web Application Add interactivity to web app Clean up resources "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/1-virtual-mfa-device/",
	"title": "Virtual MFA Devices",
	"tags": [],
	"description": "",
	"content": "\rTo enable MFA, you need to log in to AWS using the root user.\nActivate virtual MFA devices via Console To set up and activate virtual MFA devices:\nSign-in to the AWS Console. In the upper right corner, you will see your account name. Click the drop-down and select My Security Credentials. Expand Multi-factor authentication (MFA) and select Active MFA. In Manage MFA Device, select Virtual MFA device then select Continue. Install a compatible Authenticator application on your phone. After installing the app, select Show QR Code and use your Authenticator application to scan the QR code. Sample MFA registration with Microsoft Authenticator: In the MFA code 1 box, enter 6 numeric characters from the app. Wait 30 seconds or until the next refresh, then enter the next 6 characters into the MFA Code 2 box and select Assign MFA. You have now completed activating your virtual MFA device! "
},
{
	"uri": "//localhost:1313/0-introdution/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview In this workshop, you will learn to create a simple full-stack web application using AWS Amplify. Throughout this workshop, you will build and host a React application on AWS, use Amplify to add authentication, data, and a serverless function to capture the signed-up user\u0026rsquo;s email and save it in the database. Then, you will implement a frontend for your app that integrates with your cloud resources.\nArchitect Schema The following diagram provides a visual representation of the services used in this simple lab and how they are connected. This application uses AWS Amplify, GraphQL API, AWS Lambda, and Amazon DynamoDB.\nAs you go through the workshop, you will learn about the services in detail and find resources that will help you get up to speed with them.\nWhat you will accomplish Host: Build and deploy a React application on the AWS global content delivery network (CDN).\nAuthenticate: Add authentication to your app to enable sign-in and sign-out functionality.\nDatabase: Integrate a real-time API, database, and a serverless function.\nFunction: Implement a lambda function that is triggered when a user signs up to the App.\nRequired An AWS account: with administrator permission\nNodejs and npm: Installed on your computer\nGit \u0026amp; GitHub account: Foundational knowledge of Visual Studio Code: Installed on your computer\nIf you have a FreeTier Account, that\u0026rsquo;s so great\nAccounts created within the past 24 hours might not yet have access to the services required for this lab\nMain content Introduction Create \u0026amp; Deploy a Web Application with ReactJS Build Serverless function with AWS Lamda Create Data Table with DynamoDB Link Serverless function to Web Application Add interactivity to web app Clean up resources "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/2-u2f-security-key/",
	"title": "U2F Security Key",
	"tags": [],
	"description": "",
	"content": "\rThe following steps require a U2F security key.\nEnable U2F security key via Console U2F is an open authentication standard hosted by the FIDO Alliance. When you enable a U2F key in AWS, the U2F security key creates a new key pair for use with only AWS. First, you enter your credentials. When prompted, you tap the U2F security key, which responds to the authentication challenge issued by AWS.\nSign-in to AWS Console. In the upper right corner, you\u0026rsquo;ll see your account name, select and select My Security Credentials. Note: To manage a U2F security key for your own IAM user while protecting sensitive MFA-related actions, you must have the permissions from the following policy.\nIn the left bar, select Policies then select Create policy. Select JSON tab and paste the policy document from below: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowManageOwnUserMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:DeactivateMFADevice\u0026#34;, \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;DenyAllExceptListedIfNoMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;, \u0026#34;NotAction\u0026#34;: [ \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;BoolIfExists\u0026#34;: { \u0026#34;aws:MultiFactorAuthPresent\u0026#34;: \u0026#34;false\u0026#34; } } } ] } Select Next: Tags. You\u0026rsquo;ll be presented with a screen about Tags, a tool used to identify groups of AWS resources. Select Next: Review. This is a screen that allows you to review the policy that you are creating. Enter the name of the policy (for example, MFAHardDevice) and select Create policy. In the left bar, select Dashboard and then select Enable MFA. Expand Multi-factor authentication (MFA) and then select Active MFA. Under Manage MFA Device, select U2F security key then press Continue. Plug the U2F security key into your computer. Follow the on-screen prompts to press the U2F security key, and then select Close when U2F is successfully set up. "
},
{
	"uri": "//localhost:1313/1-create-a-web-app/",
	"title": "Create &amp; Deploy a Web Application with ReactJS",
	"tags": [],
	"description": "",
	"content": "Content:\nCreate a new ReactJS Application Initialize a Github Repository Install the Amplify packages Deploy your app with AWS Amplify Create a new ReactJS Application In this task, you will create a React application and deploy it to the Cloud using AWS Amplify. AWS Amplify offers a Git-based CI/CD workflow for building, deploying, and hosting single-page web applications or static sites with backends. When connected to a Git repository, Amplify determines the build settings for both the frontend framework and any configured backend resources, and automatically deploys updates with every code commit.\nIn this task, you will start by creating a new React application and pushing it to a GitHub repository. You will then connect the repository to AWS Amplify web hosting and deploy it to a globally available content delivery network (CDN) hosted on an amplifyapp.com domain.\n1. Create a new React application Step 1: Open you file explorer, create a new folder name it \u0026laquo;Your-Project-Amplify\u0026raquo; and open Visual Studio Code with the folder created open terminal in VS Code run the following command to create a new React application using Vite and React:\nnpm create vite@latest profilesapp -- --template react cd profilesapp npm install npm run dev Step 2: In the terminal window, select and open the Local link 5173 to view the Vite + React application.\n2. Initialize a Github Repository In this step, you will create a GitHub repository and commit your code to the repository. You will need a GitHub account to complete this step, if you do not have an account, sign up here.\nIf you have never used GitHub on your computer, follow these steps before continue.\nStep 1: Open a new browser tab and navigate to GitHub at https://github.com\nStep 2: Sign in to your GitHub account.\nStep 3: Click the + sign in the top right corner of the page and select New repository.\nStep 4: In the Repository name field, enter profile_app.\nStep 5: Open your source code initilized in the previous step, right click on the profilesapp and click Open in Intergrated Terminal, and run the following commands to initialize a git and push of the application to the new GitHub repository:\nNote: Replace the GitHub URL in the command with your GitHub URL.\nRun the following commands in the terminal:\ngit init git add . git commit -m \u0026#34;first commit\u0026#34; git remote add origin https://github.com/\u0026lt;your-username\u0026gt;/profile_app git branch -M main git push -u origin main 3. Install the Amplify packages Open a new terminal window, navigate to your app\u0026rsquo;s root folder (profilesapp) open in Intergrated Terminal above by right click on file package.json, purpose is navigate correctly to root folder, and run the following command: Run the following command to install the Amplify CLI:\nnpm create amplify@latest -y Running the previous command will scaffold a lightweight Amplify project in the app’s directory. In your terminal window, run the following command to push the changes to GitHub: git add . git commit -m \u0026#34;Add Amplify installed\u0026#34; git push If you have successfully pushed the changes to GitHub, you will see the following message in the terminal:\n4. Deploy your app with AWS Amplify Sign in to the AWS Management console in a new browser window, and open the AWS Amplify console at https://console.aws.amazon.com/amplify/. Choose Deploy at the center of the page. On the Start building with Amplify page, for Deploy your app, select GitHub, and select Next. When prompted, authenticate with GitHub by selecting Authorize AWS Amplify. Select repository you want to deploy on Amplify, authenticate with GitHub by selecting Only select repositories (you can choose all repositories, this instance I choose only repositories) and choose Your project : Profile_app after that click Install \u0026amp; Authorize. You will be automatically redirected back to the Amplify console, select the repository, main branch you want to deploy, and then choose Next. Leave the default build settings, and select Next. Review the settings, and select Save and deploy\nAWS Amplify will now build your source code and deploy your app at https://...amplifyapp.com, and on every git push your deployment instance will be update automatically . It may take up to 5 minutes to deploy your ReactJS app.\nOnce the build completely, select the Visit deployed URL button to see your web app up and running live. You can now view your deployed ReactJS app on the AWS Amplify console.You can view you domain name and the status of the deployment. If you see the following screen, your deployment was successful and host a ReactJS app on AWS Amplify perfectly. Good job You have deployed a React application in the AWS Cloud by integrating with GitHub and using AWS Amplify. With AWS Amplify, you can continuously deploy your application in the Cloud and host it on a globally available CDN\n"
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/3-other-hardware-mfa-device/",
	"title": "Hardware MFA Device",
	"tags": [],
	"description": "",
	"content": "\rThe following steps require a hardware MFA device.\nEnabling a hardware MFA device through Console A hardware MFA device generates a six-digit numeric code based upon a time-synchronized one-time password algorithm. Hardware MFA devices and U2F security keys are both physical devices that you purchase. The difference is that hardware MFA devices generate a code that you view and then enter when prompted when signing it to AWS.\nSign-in to the AWS Console. In the upper right corner, you\u0026rsquo;ll see your account name, select and select My Security Credentials. Note: To manage a hardware MFA device for your own IAM user while protecting sensitive MFA-related actions, you must have the permissions from the following policy.\nIn the left bar, select Policies then select Create policy. Select JSON tab and paste the policy document from below: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowManageOwnUserMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:DeactivateMFADevice\u0026#34;, \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;DenyAllExceptListedIfNoMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;, \u0026#34;NotAction\u0026#34;: [ \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;BoolIfExists\u0026#34;: { \u0026#34;aws:MultiFactorAuthPresent\u0026#34;: \u0026#34;false\u0026#34; } } } ] } Select Next: Tags. You\u0026rsquo;ll be presented with a screen about Tags, a tool used to identify groups of AWS resources. Select Next: Review. This is a screen that allows you to review the policy that you are creating. Enter the name of the policy (for example, MFAHardDevice) and select Create policy. In the left bar, select Dashboard and then select Enable MFA. Expand Multi-factor authentication (MFA) and then select Active MFA. Under Manage MFA Device, select Other Hardware MFA Device then press Continue. Enter Serial Number in the back of the device. Enter MFA code 1. Wait 30 seconds or until the code changes, then enter MFA code 2. Select Assign MFA. "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/",
	"title": "Build Serverless function with AWS Lamda",
	"tags": [],
	"description": "",
	"content": "For increased security, we recommend that you configure multi-factor authentication (MFA) to help protect your AWS resources.\nYou can enable one MFA device (of any kind) per root user or IAM user.\nIn this guide, we will go through 3 MFA options:\nVirtual MFA devices (applications) on your smartphone such as Microsoft Authenticator, Google Authenticator, or Okta Verify. Physical U2F security key such as a YubiKey. Hardware MFA devices such as the Gemalto token. "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/4-testpublic/",
	"title": "TestPublic",
	"tags": [],
	"description": "",
	"content": "\rTo enable MFA, you need to log in to AWS using the root user.\nActivate virtual MFA devices via Console To set up and activate virtual MFA devices:\nSign-in to the AWS Console. In the upper right corner, you will see your account name. Click the drop-down and select My Security Credentials. Expand Multi-factor authentication (MFA) and select Active MFA. In Manage MFA Device, select Virtual MFA device then select Continue. Install a compatible Authenticator application on your phone. After installing the app, select Show QR Code and use your Authenticator application to scan the QR code. Sample MFA registration with Microsoft Authenticator: In the MFA code 1 box, enter 6 numeric characters from the app. Wait 30 seconds or until the next refresh, then enter the next 6 characters into the MFA Code 2 box and select Assign MFA. You have now completed activating your virtual MFA device! "
},
{
	"uri": "//localhost:1313/3-create-data-table/",
	"title": "Creating an Administrator Group and Admin User",
	"tags": [],
	"description": "",
	"content": "Creating an Admininistrator Group Log-in to the AWS Console from the AWS Web Services homepage Navigate to the Identity and Access Management (IAM) page by either: Clicking on the account name in the top right corner and select My Security Credentials Typing IAM into the services search-bar and selecting \u0026lsquo;IAM\u0026rsquo; From the left pane, select User Groups then select Create Group Under Name the group, enter the Group name (For example, AdminGroup) and scroll down the page. In the Attach permissions policies section, type AdministratorAccess in the search box and select the checkbox. Finally, select Create Group. Creating an Admin User From the left pane of the IAM console, select Users then click on Add User. Enter a User name (For example, AdminUser). To allow the user to be authenticated for web-console access, check AWS Management Console access. To allow the user to be authenticated for AWS API, CLI, and SDK access, check Programmatic Access. To set your own password instead of using an autogenerated one, click Custom password and type in your desired password. Uncheck User must create a new password at next sign-in to avoid being prompted to create a new password on the first login. (note: you must remember this password for future logins) Click Next:Permissions. Click the Add user to group tab and select AdminGroup which we had created earlier. Click Next:Tags Tags are an optional option to organize, track, or control user access, so you can either add your appropriate tags or skip this step. Click Next:Review. Review the user details then select Create User. After creating the user, you will offered to download a file containing the access credentials as needed. Please store this securely until the credentials have been communicated with your users. Once they are able to access their IAM users, you may securely delete this file.\n"
},
{
	"uri": "//localhost:1313/4-link-serverlessfunction-towebapp/",
	"title": "Getting Support for Account Authentication",
	"tags": [],
	"description": "",
	"content": "During AWS account setup, sometimes problems may arise when validating contact number information, such as failure to receive SMS messages or calls from the AWS. To remediate this issue, please follow the following steps to complete the vation of the account information:\nContent:\nVerify your account information Create a support case with AWS Support Verify your account information Kindly check your account details again and make sure they are entered correctly:\nCheck that the phone number and international calling code are correctly enetered to receive SMS or calls. If you use a mobile phone, check your phone to make sure you are still within coverage to receive SMS or calls. Check that the payment method information has been entered correctly. Create a support case with AWS Support If you are still not able to receive an SMS message or authentication call even after verifying your account information, please contact AWS Support to assist you in manually activating your account.\nGo to the AWS Support Console and select Create case. Select Account and billing support and enter the support information:\nType: Select Account.\nCategory: Select Activation.\nSubject: Write your encounter briefly (e.g. Did not receive an SMS message or call for verification)\nDescription: Provide details of your situation.\nAttachments: Attach any images which may lend greater clarify to the situation.\nUnder Contact options, select Chat in Contact methods. Click Submit. The AWS Support team will contact you and assist in activating your account. You can create support requests with AWS Support even if your account is not activated.\n"
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "\rTo enable MFA, you need to log in to AWS using the root user.\nActivate virtual MFA devices via Console To set up and activate virtual MFA devices:\nSign-in to the AWS Console. In the upper right corner, you will see your account name. Click the drop-down and select My Security Credentials. Expand Multi-factor authentication (MFA) and select Active MFA. In Manage MFA Device, select Virtual MFA device then select Continue. Install a compatible Authenticator application on your phone. After installing the app, select Show QR Code and use your Authenticator application to scan the QR code. Sample MFA registration with Microsoft Authenticator: In the MFA code 1 box, enter 6 numeric characters from the app. Wait 30 seconds or until the next refresh, then enter the next 6 characters into the MFA Code 2 box and select Assign MFA. You have now completed activating your virtual MFA device! "
},
{
	"uri": "//localhost:1313/5-add-interactivity/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "# Add Interactivity Welcome to the interactivity section of the workshop. In this section, you will learn how to add interactive features to your serverless application. ## Objectives - Understand the basics of interactivity in web applications. - Implement interactive elements using AWS services. - Test and deploy your interactive features. ## Prerequisites - Basic knowledge of AWS services. - Completion of previous sections in this workshop. ## Steps 1. **Introduction to Interactivity** - Learn about different types of interactive elements. - Understand how interactivity enhances user experience. 2. **Setting Up AWS Services** - Configure necessary AWS services for interactivity. - Ensure all services are properly connected. 3. **Implementing Interactive Features** - Add interactive elements to your application. - Use AWS Lambda, API Gateway, and other services. 4. **Testing and Deployment** - Test the interactive features locally. - Deploy the features to your AWS environment. ## Conclusion By the end of this section, you will have a fully interactive serverless application. Continue to the next section to learn more advanced features. ## Resources - [AWS Documentation](https://docs.aws.amazon.com/) - [Workshop GitHub Repository](https://github.com/your-repo) "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]